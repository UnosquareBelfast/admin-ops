pipeline {
    agent {
        node {
            label 'master'
        }
    }
    environment {
    	AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
		AWS_SECRET_ACCESS_KEY = credentials('	AWS_SECRET_ACCESS_KEY')
        
        // // RDS CONF
        // AWS_RDS_POSTGRES_PORT = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/rds/rdsdatabaseport" --output text --query "Parameter.Value")'
        // )}"""

        // AWS_RDS_POSTGRES_HOST = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/rds/rdsdatabaseendpoint" --output text --query "Parameter.Value")'
        // )}"""
        
        // AWS_RDS_POSTGRES_DB = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/rds/rdsdatabasename" --output text --query "Parameter.Value")'
        // )}"""
        
        // AWS_RDS_POSTGRES_USERNAME = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/rds/rdsdatabasemasterusername" --output text --query "Parameter.Value")'
        // )}"""
        
        // AWS_RDS_POSTGRES_PWD = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/rds/rdsdatabasemasteruserpwd" --output text --query "Parameter.Value")'
        // )}"""
        
        // // ECR + ECS CONF
        // //  Issue accessing this env var from sh()
        // ECR_VERSION = '0.0.0' // SEMVAR [MAJOR][MINOR][PATCH]
        // AWS_REPOSITORY_URI = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/ecr/repositoryuri" --output text --query "Parameter.Value")'
        // )}"""
        // AWS_REPOSITORY_NAME = """${sh(
        //     returnStdout: true,
        //     script: 'echo -n $(aws ssm get-parameter --name "/unosquare/project/internal/PROD/param/ecr/reponame" --output text --query "Parameter.Value")'
        // )}"""
        
    }

    stages {
        stage('Get Repo') {
            steps {
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: 'ops/deploy']], 
                    userRemoteConfigs: [[url: 'https://github.com/UnosquareBelfast/admin-backend']]])
            }
        }
        
        stage('Set ENV Vars'){
            steps {
                withAWSParameterStore(credentialsId: 'uno-aws-global-creds', naming: 'relative', path: '/unosquare/project/internal/PROD/param', recursive: true, regionName: 'eu-west-1', namePrefixes:'') {
                    sh 'env'
                    // script {
                    //     env.AWS_REPOSITORY_URI = "${env.ECR_REPOSITORYURI}"
                    //     env.DOMAIN = "${env.ELB_ECSALBDNS}"
                    // }
                    sh "exit 1"
                }
            }
        }
        stage('Setup props deploy file'){
            steps {
                sh "env"
                sh "exit 1"
                sh "cat src/main/resources/application.properties.docker.aws.deploy.skel > src/main/resources/application.properties.docker"
                sh "sed -ie 's/{AWS_RDS_POSTGRES_HOST}/'\"${AWS_RDS_POSTGRES_HOST}\"'/' src/main/resources/application.properties.docker"
                sh "sed -ie 's/{AWS_RDS_POSTGRES_PORT}/'\"${AWS_RDS_POSTGRES_PORT}\"'/' src/main/resources/application.properties.docker"
                sh "sed -ie 's/{AWS_RDS_POSTGRES_DB}/'\"${AWS_RDS_POSTGRES_DB}\"'/' src/main/resources/application.properties.docker"
                sh "sed -ie 's/{AWS_RDS_POSTGRES_USERNAME}/'\"${AWS_RDS_POSTGRES_USERNAME}\"'/' src/main/resources/application.properties.docker"
                sh "sed -ie 's/{AWS_RDS_POSTGRES_PWD}/'\"${AWS_RDS_POSTGRES_PWD}\"'/' src/main/resources/application.properties.docker"
                sh "cat src/main/resources/application.properties.docker"
                // sh "exit 1"
            }
        }
        stage('Put Dockerfile into useable place'){
            steps {
                sh "cat ./docker/admin.core.Dockerfile > ./Dockerfile"
            }
        }
        stage('Docker build the image') {
            steps {
                sh "docker build -t ${env.AWS_REPOSITORY_URI}/${env.AWS_REPOSITORY_NAME}:${env.ECR_VERSION}.${env.BUILD_ID} ."
                sh "docker tag ${env.AWS_REPOSITORY_URI}/${env.AWS_REPOSITORY_NAME}:${env.ECR_VERSION}.${env.BUILD_ID} ${env.AWS_REPOSITORY_URI}/${env.AWS_REPOSITORY_NAME}:latest"
            }
        }
        stage('Docker push repo') {
            steps {
                script {
                    docker.withRegistry("https://${env.AWS_REPOSITORY_URI}", 'ecr:eu-west-1:uno-aws-global-creds')
                    {
                        docker.image("${env.AWS_REPOSITORY_URI}/${env.AWS_REPOSITORY_NAME}:${env.ECR_VERSION}.${env.BUILD_ID}").push()
                        docker.image("${env.AWS_REPOSITORY_URI}/${env.AWS_REPOSITORY_NAME}:latest").push()
                    }
                }
            }
        }

        stage("Ecs::task refresh") {
            steps {
                echo "Do stop of the ecs running task in order for task refesh"
            }
        }
    }

    post {
        always {
            echo "Done ${BUILD_ID}"
        }
    }
}